%import modified_bap_il (stmt_metavars, exp_metavars_placeholders, exp_placeholders)

%import common.NEWLINE
%import common.WS
%ignore WS
%ignore /\/\/.*/ // for comments

policy: rules default | default
rules: rule | rule rules
rule: loc "::" ins "::" expr "::" mem "->" dec NEWLINE
wildcard: "*"
default: "default" "->" dec NEWLINE?
dec: concretize | simbolize | propagate | concretize_restrict | simbolize_restrict | propagate_restrict
    concretize: "C"
    simbolize: "S"
    propagate: "P"
concretize_restrict: concretize min | concretize max | concretize avg
    min: "[min]"
    max: "[max]"
    avg: "[avg]"
simbolize_restrict: simbolize "[" exp_placeholders "]" | simbolize "[" exp_placeholders ".." exp_placeholders "]"
propagate_restrict: propagate p_restriction
p_restriction: "[" exp_placeholders "]"
            | "[" exp_placeholders ".." exp_placeholders "]"
            | "[" num ";" exp_placeholders "]"
            | "[" num ";" exp_placeholders ".." exp_placeholders "]"
            | "[" num "]"

loc: num | "[" num ".." num  "]" | wildcard

// instructions correspond to BIL statements and can have metavars
ins: "<" stmt_metavars ">" | wildcard

// expressions are the building blocks of instructions and can have new metavars or placeholders (which replace the previous metavars)
expr: "<" exp_metavars_placeholders ">" | subterm | strict_subterm | wildcard
subterm: subterm "-<" exp_metavars_placeholders | strict_subterm "-<" exp_metavars_placeholders | exp_metavars_placeholders "-<" exp_metavars_placeholders
strict_subterm: strict_subterm "=<" exp_metavars_placeholders | subterm "=<" exp_metavars_placeholders | exp_metavars_placeholders "=<" exp_metavars_placeholders
// we allow mixed chains of subterms and strict subterms which can contain both metavars (both types) and placeholders (both types)

// memory functions can have placeholders (which replace the previous metavars)
mem: memfunc "(" exp_placeholders ")" | wildcard
memfunc: /[a-zA-Z_][a-zA-Z0-9_]*/

num: hex | decimal
    hex: /0x[0-9a-fA-F]+/
    decimal: /\d+/